=begin
#User API

#The User API represents all functionality that a user in Design Huddle may perform. Every API method is run in the context of a single user and requires a user-specific Access Token for authorization. The most common integration use cases consist of listing templates, creating design projects from those templates and exporting the finished designs. Read more about authentication <a target=\"_parent\" href=\"https://api.designhuddle.com#authentication\">here</a> and embedding the Design Huddle editor <a target=\"_parent\" href=\"https://api.designhuddle.com#embedding\">here</a>.

The version of the OpenAPI document: 2023-02-02T22:11:12Z
Contact: support@designhuddle.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module DesignHuddleUser
  class ExportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve export job progress
    # @param job_id [String] 
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectsProjectIDExportJobsJobIDGETSuccess]
    def projects_project_id_export_jobs_job_id_get(job_id, project_id, opts = {})
      data, _status_code, _headers = projects_project_id_export_jobs_job_id_get_with_http_info(job_id, project_id, opts)
      data
    end

    # Retrieve export job progress
    # @param job_id [String] 
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectsProjectIDExportJobsJobIDGETSuccess, Integer, Hash)>] ProjectsProjectIDExportJobsJobIDGETSuccess data, response status code and response headers
    def projects_project_id_export_jobs_job_id_get_with_http_info(job_id, project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.projects_project_id_export_jobs_job_id_get ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling ExportApi.projects_project_id_export_jobs_job_id_get"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ExportApi.projects_project_id_export_jobs_job_id_get"
      end
      # resource path
      local_var_path = '/projects/{project_id}/export/jobs/{job_id}'.sub('{' + 'job_id' + '}', CGI.escape(job_id.to_s)).sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsProjectIDExportJobsJobIDGETSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ExportApi.projects_project_id_export_jobs_job_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#projects_project_id_export_jobs_job_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an export job
    # @param project_id [String] 
    # @param projects_project_id_export_post_request [ProjectsProjectIDExportPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectsProjectIDExportPOSTSuccess]
    def projects_project_id_export_post(project_id, projects_project_id_export_post_request, opts = {})
      data, _status_code, _headers = projects_project_id_export_post_with_http_info(project_id, projects_project_id_export_post_request, opts)
      data
    end

    # Create an export job
    # @param project_id [String] 
    # @param projects_project_id_export_post_request [ProjectsProjectIDExportPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectsProjectIDExportPOSTSuccess, Integer, Hash)>] ProjectsProjectIDExportPOSTSuccess data, response status code and response headers
    def projects_project_id_export_post_with_http_info(project_id, projects_project_id_export_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.projects_project_id_export_post ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ExportApi.projects_project_id_export_post"
      end
      # verify the required parameter 'projects_project_id_export_post_request' is set
      if @api_client.config.client_side_validation && projects_project_id_export_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_project_id_export_post_request' when calling ExportApi.projects_project_id_export_post"
      end
      # resource path
      local_var_path = '/projects/{project_id}/export'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_project_id_export_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsProjectIDExportPOSTSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ExportApi.projects_project_id_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#projects_project_id_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
