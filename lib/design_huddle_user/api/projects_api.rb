=begin
#User API

#The User API represents all functionality that a user in Design Huddle may perform. Every API method is run in the context of a single user and requires a user-specific Access Token for authorization. The most common integration use cases consist of listing templates, creating design projects from those templates and exporting the finished designs. Read more about authentication <a target=\"_parent\" href=\"https://api.designhuddle.com#authentication\">here</a> and embedding the Design Huddle editor <a target=\"_parent\" href=\"https://api.designhuddle.com#embedding\">here</a>.

The version of the OpenAPI document: 2023-02-02T22:11:12Z
Contact: support@designhuddle.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0

=end

require 'cgi'

module DesignHuddleUser
  class ProjectsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List projects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :brand_id Specify the Brand ID to filter the result by.
    # @option opts [String] :brand_code Specify the Brand Code to filter the result by.
    # @option opts [String] :media_type Specify the media type to filter the result by.
    # @option opts [Array<String>] :media_types Specify the media types to filter the result by.
    # @option opts [String] :project_status Specify the project status to filter the result by. (default to 'active')
    # @option opts [Array<String>] :project_statuses Specify the project statuses to filter the result by.
    # @option opts [String] :project_ownership Specify the project ownership to filter the result by. (default to 'all_projects')
    # @option opts [Integer] :source_template_id Specify the Source Template ID to filter the result by.
    # @option opts [Array<Integer>] :source_template_ids Specify the Source Template IDs to filter the result by.
    # @option opts [String] :source_template_code Specify the Source Template Code to filter the result by.
    # @option opts [Array<String>] :source_template_codes Specify the Source Template Codes to filter the result by.
    # @option opts [Integer] :width Specify the width to filter the result by.
    # @option opts [Integer] :height Specify the height to filter the result by.
    # @option opts [String] :unit_type Specify the unit type to filter the result by.
    # @option opts [String] :search A search term used to narrow the focus of the result.
    # @option opts [String] :sort Specify which attribute to order the result by. (default to 'last_edited')
    # @option opts [String] :order Specify whether the result should be retrieved in ascending or descending order. (default to 'DESC')
    # @option opts [Integer] :limit Specify the number of items per page to return. (default to 50)
    # @option opts [Integer] :page Specify which page of the result to return. (default to 1)
    # @option opts [Array<String>] :fields Specify the fields to the retrieve.
    # @return [ProjectsGETSuccess]
    def projects_get(opts = {})
      data, _status_code, _headers = projects_get_with_http_info(opts)
      data
    end

    # List projects
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :brand_id Specify the Brand ID to filter the result by.
    # @option opts [String] :brand_code Specify the Brand Code to filter the result by.
    # @option opts [String] :media_type Specify the media type to filter the result by.
    # @option opts [Array<String>] :media_types Specify the media types to filter the result by.
    # @option opts [String] :project_status Specify the project status to filter the result by. (default to 'active')
    # @option opts [Array<String>] :project_statuses Specify the project statuses to filter the result by.
    # @option opts [String] :project_ownership Specify the project ownership to filter the result by. (default to 'all_projects')
    # @option opts [Integer] :source_template_id Specify the Source Template ID to filter the result by.
    # @option opts [Array<Integer>] :source_template_ids Specify the Source Template IDs to filter the result by.
    # @option opts [String] :source_template_code Specify the Source Template Code to filter the result by.
    # @option opts [Array<String>] :source_template_codes Specify the Source Template Codes to filter the result by.
    # @option opts [Integer] :width Specify the width to filter the result by.
    # @option opts [Integer] :height Specify the height to filter the result by.
    # @option opts [String] :unit_type Specify the unit type to filter the result by.
    # @option opts [String] :search A search term used to narrow the focus of the result.
    # @option opts [String] :sort Specify which attribute to order the result by. (default to 'last_edited')
    # @option opts [String] :order Specify whether the result should be retrieved in ascending or descending order. (default to 'DESC')
    # @option opts [Integer] :limit Specify the number of items per page to return. (default to 50)
    # @option opts [Integer] :page Specify which page of the result to return. (default to 1)
    # @option opts [Array<String>] :fields Specify the fields to the retrieve.
    # @return [Array<(ProjectsGETSuccess, Integer, Hash)>] ProjectsGETSuccess data, response status code and response headers
    def projects_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_get ...'
      end
      allowable_values = ["digital", "video", "print", "presentation"]
      if @api_client.config.client_side_validation && opts[:'media_type'] && !allowable_values.include?(opts[:'media_type'])
        fail ArgumentError, "invalid value for \"media_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["digital", "video", "print", "presentation"]
      if @api_client.config.client_side_validation && opts[:'media_types'] && !opts[:'media_types'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"media_types\", must include one of #{allowable_values}"
      end
      allowable_values = ["active", "archived"]
      if @api_client.config.client_side_validation && opts[:'project_status'] && !allowable_values.include?(opts[:'project_status'])
        fail ArgumentError, "invalid value for \"project_status\", must be one of #{allowable_values}"
      end
      allowable_values = ["active", "archived"]
      if @api_client.config.client_side_validation && opts[:'project_statuses'] && !opts[:'project_statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"project_statuses\", must include one of #{allowable_values}"
      end
      allowable_values = ["all_projects", "my_projects", "shared_with_me"]
      if @api_client.config.client_side_validation && opts[:'project_ownership'] && !allowable_values.include?(opts[:'project_ownership'])
        fail ArgumentError, "invalid value for \"project_ownership\", must be one of #{allowable_values}"
      end
      allowable_values = ["px", "in", "mm"]
      if @api_client.config.client_side_validation && opts[:'unit_type'] && !allowable_values.include?(opts[:'unit_type'])
        fail ArgumentError, "invalid value for \"unit_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ProjectsApi.projects_get, must be smaller than or equal to 1000.'
      end

      allowable_values = ["project_id", "user", "media_type", "project_title", "project_status", "dimensions", "page_count", "scene_count", "duration", "thumbnail_url", "source_template", "brand", "project_approval_status", "date_created", "date_updated", "last_edited", "last_opened", "presentation_count"]
      if @api_client.config.client_side_validation && opts[:'fields'] && !opts[:'fields'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"fields\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'brand_id'] = opts[:'brand_id'] if !opts[:'brand_id'].nil?
      query_params[:'brand_code'] = opts[:'brand_code'] if !opts[:'brand_code'].nil?
      query_params[:'media_type'] = opts[:'media_type'] if !opts[:'media_type'].nil?
      query_params[:'media_types'] = @api_client.build_collection_param(opts[:'media_types'], :multi) if !opts[:'media_types'].nil?
      query_params[:'project_status'] = opts[:'project_status'] if !opts[:'project_status'].nil?
      query_params[:'project_statuses'] = @api_client.build_collection_param(opts[:'project_statuses'], :multi) if !opts[:'project_statuses'].nil?
      query_params[:'project_ownership'] = opts[:'project_ownership'] if !opts[:'project_ownership'].nil?
      query_params[:'source_template_id'] = opts[:'source_template_id'] if !opts[:'source_template_id'].nil?
      query_params[:'source_template_ids'] = @api_client.build_collection_param(opts[:'source_template_ids'], :multi) if !opts[:'source_template_ids'].nil?
      query_params[:'source_template_code'] = opts[:'source_template_code'] if !opts[:'source_template_code'].nil?
      query_params[:'source_template_codes'] = @api_client.build_collection_param(opts[:'source_template_codes'], :multi) if !opts[:'source_template_codes'].nil?
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'height'] = opts[:'height'] if !opts[:'height'].nil?
      query_params[:'unit_type'] = opts[:'unit_type'] if !opts[:'unit_type'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'fields'] = @api_client.build_collection_param(opts[:'fields'], :multi) if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsGETSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a project
    # @param projects_post_request [ProjectsPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ProjectsPOSTSuccess]
    def projects_post(projects_post_request, opts = {})
      data, _status_code, _headers = projects_post_with_http_info(projects_post_request, opts)
      data
    end

    # Create a project
    # @param projects_post_request [ProjectsPOSTRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectsPOSTSuccess, Integer, Hash)>] ProjectsPOSTSuccess data, response status code and response headers
    def projects_post_with_http_info(projects_post_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_post ...'
      end
      # verify the required parameter 'projects_post_request' is set
      if @api_client.config.client_side_validation && projects_post_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_post_request' when calling ProjectsApi.projects_post"
      end
      # resource path
      local_var_path = '/projects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_post_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsPOSTSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive a project
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccess]
    def projects_project_id_delete(project_id, opts = {})
      data, _status_code, _headers = projects_project_id_delete_with_http_info(project_id, opts)
      data
    end

    # Archive a project
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccess, Integer, Hash)>] BaseSuccess data, response status code and response headers
    def projects_project_id_delete_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_project_id_delete ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_project_id_delete"
      end
      # resource path
      local_var_path = '/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_project_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_project_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a project
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :generate_latest_thumbnail If a thumbnail has not already been generated incorporating the latest design changes, this will synchronously create a new thumbnail prior to returning the requested project data, including the new thumbnail_url. (default to false)
    # @return [ProjectsProjectIDGETSuccess]
    def projects_project_id_get(project_id, opts = {})
      data, _status_code, _headers = projects_project_id_get_with_http_info(project_id, opts)
      data
    end

    # Retrieve a project
    # @param project_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :generate_latest_thumbnail If a thumbnail has not already been generated incorporating the latest design changes, this will synchronously create a new thumbnail prior to returning the requested project data, including the new thumbnail_url. (default to false)
    # @return [Array<(ProjectsProjectIDGETSuccess, Integer, Hash)>] ProjectsProjectIDGETSuccess data, response status code and response headers
    def projects_project_id_get_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_project_id_get ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_project_id_get"
      end
      # resource path
      local_var_path = '/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'generate_latest_thumbnail'] = opts[:'generate_latest_thumbnail'] if !opts[:'generate_latest_thumbnail'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectsProjectIDGETSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_project_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_project_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a project
    # @param project_id [String] 
    # @param projects_project_idpatch_request [ProjectsProjectIDPATCHRequest] 
    # @param [Hash] opts the optional parameters
    # @return [BaseSuccess]
    def projects_project_id_patch(project_id, projects_project_idpatch_request, opts = {})
      data, _status_code, _headers = projects_project_id_patch_with_http_info(project_id, projects_project_idpatch_request, opts)
      data
    end

    # Update a project
    # @param project_id [String] 
    # @param projects_project_idpatch_request [ProjectsProjectIDPATCHRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BaseSuccess, Integer, Hash)>] BaseSuccess data, response status code and response headers
    def projects_project_id_patch_with_http_info(project_id, projects_project_idpatch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectsApi.projects_project_id_patch ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ProjectsApi.projects_project_id_patch"
      end
      # verify the required parameter 'projects_project_idpatch_request' is set
      if @api_client.config.client_side_validation && projects_project_idpatch_request.nil?
        fail ArgumentError, "Missing the required parameter 'projects_project_idpatch_request' when calling ProjectsApi.projects_project_id_patch"
      end
      # resource path
      local_var_path = '/projects/{project_id}'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(projects_project_idpatch_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BaseSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['UserAccessToken']

      new_options = opts.merge(
        :operation => :"ProjectsApi.projects_project_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectsApi#projects_project_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
